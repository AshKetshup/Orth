State 0:
prog' -> . prog [ # ]
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On stmts shift to state 13
-- On prog shift to state 16
-- On expr shift to state 17

State 1:
expr -> STR . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> STR 
-- On PRINT reduce production expr -> STR 
-- On OPS reduce production expr -> STR 
-- On INT reduce production expr -> STR 
-- On IF reduce production expr -> STR 
-- On IDENT reduce production expr -> STR 
-- On EOF reduce production expr -> STR 
-- On END reduce production expr -> STR 
-- On ELSE reduce production expr -> STR 
-- On CMD reduce production expr -> STR 
-- On BOOL reduce production expr -> STR 

State 2:
expr -> PRINT . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> PRINT 
-- On PRINT reduce production expr -> PRINT 
-- On OPS reduce production expr -> PRINT 
-- On INT reduce production expr -> PRINT 
-- On IF reduce production expr -> PRINT 
-- On IDENT reduce production expr -> PRINT 
-- On EOF reduce production expr -> PRINT 
-- On END reduce production expr -> PRINT 
-- On ELSE reduce production expr -> PRINT 
-- On CMD reduce production expr -> PRINT 
-- On BOOL reduce production expr -> PRINT 

State 3:
expr -> OPS . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> OPS 
-- On PRINT reduce production expr -> OPS 
-- On OPS reduce production expr -> OPS 
-- On INT reduce production expr -> OPS 
-- On IF reduce production expr -> OPS 
-- On IDENT reduce production expr -> OPS 
-- On EOF reduce production expr -> OPS 
-- On END reduce production expr -> OPS 
-- On ELSE reduce production expr -> OPS 
-- On CMD reduce production expr -> OPS 
-- On BOOL reduce production expr -> OPS 

State 4:
expr -> INT . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> INT 
-- On PRINT reduce production expr -> INT 
-- On OPS reduce production expr -> INT 
-- On INT reduce production expr -> INT 
-- On IF reduce production expr -> INT 
-- On IDENT reduce production expr -> INT 
-- On EOF reduce production expr -> INT 
-- On END reduce production expr -> INT 
-- On ELSE reduce production expr -> INT 
-- On CMD reduce production expr -> INT 
-- On BOOL reduce production expr -> INT 

State 5:
expr -> IF . expr ELSE expr END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On expr shift to state 9

State 6:
expr -> IDENT . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> IDENT 
-- On PRINT reduce production expr -> IDENT 
-- On OPS reduce production expr -> IDENT 
-- On INT reduce production expr -> IDENT 
-- On IF reduce production expr -> IDENT 
-- On IDENT reduce production expr -> IDENT 
-- On EOF reduce production expr -> IDENT 
-- On END reduce production expr -> IDENT 
-- On ELSE reduce production expr -> IDENT 
-- On CMD reduce production expr -> IDENT 
-- On BOOL reduce production expr -> IDENT 

State 7:
expr -> CMD . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> CMD 
-- On PRINT reduce production expr -> CMD 
-- On OPS reduce production expr -> CMD 
-- On INT reduce production expr -> CMD 
-- On IF reduce production expr -> CMD 
-- On IDENT reduce production expr -> CMD 
-- On EOF reduce production expr -> CMD 
-- On END reduce production expr -> CMD 
-- On ELSE reduce production expr -> CMD 
-- On CMD reduce production expr -> CMD 
-- On BOOL reduce production expr -> CMD 

State 8:
expr -> BOOL . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> BOOL 
-- On PRINT reduce production expr -> BOOL 
-- On OPS reduce production expr -> BOOL 
-- On INT reduce production expr -> BOOL 
-- On IF reduce production expr -> BOOL 
-- On IDENT reduce production expr -> BOOL 
-- On EOF reduce production expr -> BOOL 
-- On END reduce production expr -> BOOL 
-- On ELSE reduce production expr -> BOOL 
-- On CMD reduce production expr -> BOOL 
-- On BOOL reduce production expr -> BOOL 

State 9:
expr -> IF expr . ELSE expr END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On ELSE shift to state 10

State 10:
expr -> IF expr ELSE . expr END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On expr shift to state 11

State 11:
expr -> IF expr ELSE expr . END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On END shift to state 12

State 12:
expr -> IF expr ELSE expr END . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
-- On STR reduce production expr -> IF expr ELSE expr END 
-- On PRINT reduce production expr -> IF expr ELSE expr END 
-- On OPS reduce production expr -> IF expr ELSE expr END 
-- On INT reduce production expr -> IF expr ELSE expr END 
-- On IF reduce production expr -> IF expr ELSE expr END 
-- On IDENT reduce production expr -> IF expr ELSE expr END 
-- On EOF reduce production expr -> IF expr ELSE expr END 
-- On END reduce production expr -> IF expr ELSE expr END 
-- On ELSE reduce production expr -> IF expr ELSE expr END 
-- On CMD reduce production expr -> IF expr ELSE expr END 
-- On BOOL reduce production expr -> IF expr ELSE expr END 

State 13:
prog -> stmts . EOF [ # ]
stmts -> stmts . expr [ STR PRINT OPS INT IF IDENT EOF CMD BOOL ]
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On EOF shift to state 14
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On expr shift to state 15

State 14:
prog -> stmts EOF . [ # ]
-- On # reduce production prog -> stmts EOF 

State 15:
stmts -> stmts expr . [ STR PRINT OPS INT IF IDENT EOF CMD BOOL ]
-- On STR reduce production stmts -> stmts expr 
-- On PRINT reduce production stmts -> stmts expr 
-- On OPS reduce production stmts -> stmts expr 
-- On INT reduce production stmts -> stmts expr 
-- On IF reduce production stmts -> stmts expr 
-- On IDENT reduce production stmts -> stmts expr 
-- On EOF reduce production stmts -> stmts expr 
-- On CMD reduce production stmts -> stmts expr 
-- On BOOL reduce production stmts -> stmts expr 

State 16:
prog' -> prog . [ # ]
-- On # accept prog

State 17:
stmts -> expr . [ STR PRINT OPS INT IF IDENT EOF CMD BOOL ]
-- On STR reduce production stmts -> expr 
-- On PRINT reduce production stmts -> expr 
-- On OPS reduce production stmts -> expr 
-- On INT reduce production stmts -> expr 
-- On IF reduce production stmts -> expr 
-- On IDENT reduce production stmts -> expr 
-- On EOF reduce production stmts -> expr 
-- On CMD reduce production stmts -> expr 
-- On BOOL reduce production stmts -> expr 

