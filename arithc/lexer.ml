# 5 "lexer.mll"
 
  open Lexing
  open Parser

  exception Lexing_error of string

  (*
  let id_or_kwd =
    let h = Hashtbl.create 32 in
    List.iter (fun (s, tok) -> Hashtbl.add h s tok)
      ["dup",DUP; "swap",SWAP; "drop",DROP; 
      "print",PRINT; "over",OVER; "rot",ROT
      "if", IF; "else", ELSE;
      "while", WHILE; "in", IN;
      "true", CST (Cbool true);
      "false", CST (Cbool false);
  fun s -> try Hashtbl.find h s with Not_found -> IDENT s
  *)
  let kwd_tbl = ["dup",CMD Dup; "swap", CMD Swap; "drop", CMD Drop; 
                 "printi", PRINT Printi; "printb", PRINT Printb; 
                 "prints", PRINT Prints; "over", CMD Over; "rot", CMD Rot;
                 "true", BOOL (true); "false", BOOL (false);
                 "min", OPS Min; "max", OPS Max; "mod", OPS Mod; "neg", OPS Neg;
                 ">=", OPS Ge; "<=", OPS Le; "<>", OPS Diff;
                 "if", IF; "else", ELSE; "end", END;
                 "while", WHILE; "in", IN; "proc", PROC;
                ]
  let id_or_kwd s = try List.assoc s kwd_tbl with _ -> IDENT s

  let string_buffer = Buffer.create 1024



# 36 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\241\255\242\255\243\255\075\000\245\255\246\255\247\255\
    \248\255\249\255\250\255\251\255\085\000\004\000\001\000\255\255\
    \254\255\002\000\003\000\251\255\252\255\109\000\255\255\253\255\
    \254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\002\000\014\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\017\000\000\000\
    \000\000\017\000\020\000\000\000\000\000\255\255\000\000\000\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\013\000\015\000\016\000\016\000\013\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \013\000\000\000\003\000\014\000\013\000\022\000\000\000\000\000\
    \000\000\000\000\009\000\011\000\000\000\010\000\000\000\008\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\005\000\007\000\006\000\000\000\
    \000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\000\000\000\000\000\000\000\000\021\000\
    \000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\014\000\017\000\013\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\013\000\018\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\018\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\021\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\014\000\017\000\018\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "lexer.mll"
            ( new_line lexbuf; token lexbuf )
# 168 "lexer.ml"

  | 1 ->
# 47 "lexer.mll"
                      ( new_line lexbuf; token lexbuf )
# 173 "lexer.ml"

  | 2 ->
# 48 "lexer.mll"
            ( token lexbuf )
# 178 "lexer.ml"

  | 3 ->
let
# 49 "lexer.mll"
             id
# 184 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 49 "lexer.mll"
                ( id_or_kwd id )
# 188 "lexer.ml"

  | 4 ->
# 50 "lexer.mll"
            ( OPS Add )
# 193 "lexer.ml"

  | 5 ->
# 51 "lexer.mll"
            ( OPS Sub )
# 198 "lexer.ml"

  | 6 ->
# 52 "lexer.mll"
            ( OPS Mul )
# 203 "lexer.ml"

  | 7 ->
# 53 "lexer.mll"
            ( OPS Div )
# 208 "lexer.ml"

  | 8 ->
# 54 "lexer.mll"
            ( OPS Equal )
# 213 "lexer.ml"

  | 9 ->
# 55 "lexer.mll"
            ( OPS Gt)
# 218 "lexer.ml"

  | 10 ->
# 56 "lexer.mll"
            ( OPS Lt)
# 223 "lexer.ml"

  | 11 ->
let
# 57 "lexer.mll"
               s
# 229 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 57 "lexer.mll"
                 ( INT (int_of_string s) )
# 233 "lexer.ml"

  | 12 ->
# 58 "lexer.mll"
            (STR (string lexbuf))
# 238 "lexer.ml"

  | 13 ->
# 59 "lexer.mll"
            ( EOF )
# 243 "lexer.ml"

  | 14 ->
let
# 60 "lexer.mll"
         c
# 249 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 60 "lexer.mll"
            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 253 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 18
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 64 "lexer.mll"
      ( let s = Buffer.contents string_buffer in
  Buffer.reset string_buffer;
  s )
# 267 "lexer.ml"

  | 1 ->
# 68 "lexer.mll"
      ( Buffer.add_char string_buffer '\n';
  string lexbuf )
# 273 "lexer.ml"

  | 2 ->
# 71 "lexer.mll"
      ( Buffer.add_char string_buffer '"';
  string lexbuf )
# 279 "lexer.ml"

  | 3 ->
let
# 73 "lexer.mll"
         c
# 285 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 74 "lexer.mll"
      ( Buffer.add_char string_buffer c;
  string lexbuf )
# 290 "lexer.ml"

  | 4 ->
# 77 "lexer.mll"
      ( raise (Lexing_error "unterminated string") )
# 295 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

