# 5 "lexer.mll"
 
  open Lexing
  open Parser

  exception Lexing_error of string

  let kwd_tbl = [
    "dup",    CMD Dup; 
    "swap",   CMD Swap; 
    "drop",   CMD Drop; 
    "printi", PRINT Printi; 
    "printb", PRINT Printb; 
    "prints", PRINT Prints; 
    "over",   CMD Over; 
    "rot",    CMD Rot;
    "true",   BOOL (true); 
    "false",  BOOL (false);
    "min",    OPS Min; 
    "max",    OPS Max; 
    "mod",    OPS Mod; 
    "neg",    OPS Neg;
    ">=",     OPS Ge; 
    "<=",     OPS Le; 
    "<>",     OPS Diff;
    "if",     IF; 
    "else",   ELSE; 
    "end",    END;
    "while",  WHILE; 
    "in",     IN; 
    "proc",   PROC;
    "and",    OPS And; 
    "or",     OPS Or;
    "let",    OPS Let;
    "@",      OPS Fetch;
    "?",      OPS Call;
  ]

  let id_or_kwd s = try List.assoc s kwd_tbl with _ -> IDENT s

  let string_buffer = Buffer.create 1024

# 44 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\236\255\237\255\238\255\075\000\240\255\241\255\030\000\
    \032\000\247\255\248\255\249\255\250\255\251\255\085\000\004\000\
    \001\000\255\255\254\255\002\000\243\255\242\255\244\255\003\000\
    \251\255\252\255\109\000\255\255\253\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\016\000\255\255\255\255\010\000\
    \009\000\255\255\255\255\255\255\255\255\255\255\003\000\002\000\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \019\000\000\000\000\000\019\000\000\000\000\000\000\000\025\000\
    \000\000\000\000\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\015\000\017\000\018\000\018\000\015\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \015\000\000\000\003\000\016\000\015\000\027\000\000\000\000\000\
    \000\000\000\000\011\000\013\000\000\000\012\000\000\000\010\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\007\000\009\000\008\000\005\000\
    \006\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\021\000\022\000\020\000\000\000\026\000\
    \000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\028\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\024\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\016\000\019\000\015\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\015\000\023\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\007\000\007\000\008\000\255\255\023\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\026\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\026\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\016\000\019\000\023\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 54 "lexer.mll"
            ( new_line lexbuf; token lexbuf )
# 176 "lexer.ml"

  | 1 ->
# 55 "lexer.mll"
                      ( new_line lexbuf; token lexbuf )
# 181 "lexer.ml"

  | 2 ->
# 56 "lexer.mll"
            ( token lexbuf )
# 186 "lexer.ml"

  | 3 ->
let
# 57 "lexer.mll"
             id
# 192 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 57 "lexer.mll"
                ( id_or_kwd id )
# 196 "lexer.ml"

  | 4 ->
# 58 "lexer.mll"
            ( OPS Add )
# 201 "lexer.ml"

  | 5 ->
# 59 "lexer.mll"
            ( OPS Sub )
# 206 "lexer.ml"

  | 6 ->
# 60 "lexer.mll"
            ( OPS Mul )
# 211 "lexer.ml"

  | 7 ->
# 61 "lexer.mll"
            ( OPS Div )
# 216 "lexer.ml"

  | 8 ->
# 62 "lexer.mll"
            ( OPS Equal )
# 221 "lexer.ml"

  | 9 ->
# 63 "lexer.mll"
            ( OPS Gt )
# 226 "lexer.ml"

  | 10 ->
# 64 "lexer.mll"
            ( OPS Lt )
# 231 "lexer.ml"

  | 11 ->
# 65 "lexer.mll"
            ( OPS Diff )
# 236 "lexer.ml"

  | 12 ->
# 66 "lexer.mll"
            ( OPS Ge )
# 241 "lexer.ml"

  | 13 ->
# 67 "lexer.mll"
            ( OPS Le )
# 246 "lexer.ml"

  | 14 ->
# 68 "lexer.mll"
            ( OPS Fetch )
# 251 "lexer.ml"

  | 15 ->
# 69 "lexer.mll"
            ( OPS Call )
# 256 "lexer.ml"

  | 16 ->
let
# 70 "lexer.mll"
               s
# 262 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "lexer.mll"
                 ( INT (int_of_string s) )
# 266 "lexer.ml"

  | 17 ->
# 71 "lexer.mll"
            ( STR (string lexbuf) )
# 271 "lexer.ml"

  | 18 ->
# 72 "lexer.mll"
            ( EOF )
# 276 "lexer.ml"

  | 19 ->
let
# 73 "lexer.mll"
         c
# 282 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 73 "lexer.mll"
            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 286 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 23
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 77 "lexer.mll"
      ( let s = Buffer.contents string_buffer in
  Buffer.reset string_buffer;
  s )
# 300 "lexer.ml"

  | 1 ->
# 81 "lexer.mll"
      ( Buffer.add_char string_buffer '\n';
  string lexbuf )
# 306 "lexer.ml"

  | 2 ->
# 84 "lexer.mll"
      ( Buffer.add_char string_buffer '"';
  string lexbuf )
# 312 "lexer.ml"

  | 3 ->
let
# 86 "lexer.mll"
         c
# 318 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 87 "lexer.mll"
      ( Buffer.add_char string_buffer c;
  string lexbuf )
# 323 "lexer.ml"

  | 4 ->
# 90 "lexer.mll"
      ( raise (Lexing_error "unterminated string") )
# 328 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

