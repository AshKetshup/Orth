State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On stmts shift to state 13
-- On prog shift to state 16
-- On expr shift to state 17
## Reductions:

State 1:
## Known stack suffix:
## STR
## LR(1) items:
expr -> STR . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> STR

State 2:
## Known stack suffix:
## PRINT
## LR(1) items:
expr -> PRINT . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> PRINT

State 3:
## Known stack suffix:
## OPS
## LR(1) items:
expr -> OPS . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> OPS

State 4:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> INT

State 5:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr ELSE expr END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On expr shift to state 9
## Reductions:

State 6:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> IDENT

State 7:
## Known stack suffix:
## CMD
## LR(1) items:
expr -> CMD . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> CMD

State 8:
## Known stack suffix:
## BOOL
## LR(1) items:
expr -> BOOL . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> BOOL

State 9:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> IF expr . ELSE expr END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
-- On ELSE shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## IF expr ELSE
## LR(1) items:
expr -> IF expr ELSE . expr END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On expr shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## IF expr ELSE expr
## LR(1) items:
expr -> IF expr ELSE expr . END [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
-- On END shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## IF expr ELSE expr END
## LR(1) items:
expr -> IF expr ELSE expr END . [ STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF END ELSE CMD BOOL
--   reduce production expr -> IF expr ELSE expr END

State 13:
## Known stack suffix:
## stmts
## LR(1) items:
prog -> stmts . EOF [ # ]
stmts -> stmts . expr [ STR PRINT OPS INT IF IDENT EOF CMD BOOL ]
## Transitions:
-- On STR shift to state 1
-- On PRINT shift to state 2
-- On OPS shift to state 3
-- On INT shift to state 4
-- On IF shift to state 5
-- On IDENT shift to state 6
-- On EOF shift to state 14
-- On CMD shift to state 7
-- On BOOL shift to state 8
-- On expr shift to state 15
## Reductions:

State 14:
## Known stack suffix:
## stmts EOF
## LR(1) items:
prog -> stmts EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> stmts EOF

State 15:
## Known stack suffix:
## stmts expr
## LR(1) items:
stmts -> stmts expr . [ STR PRINT OPS INT IF IDENT EOF CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF CMD BOOL
--   reduce production stmts -> stmts expr

State 16:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 17:
## Known stack suffix:
## expr
## LR(1) items:
stmts -> expr . [ STR PRINT OPS INT IF IDENT EOF CMD BOOL ]
## Transitions:
## Reductions:
-- On STR PRINT OPS INT IF IDENT EOF CMD BOOL
--   reduce production stmts -> expr

